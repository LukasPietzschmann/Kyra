// This grammar can be parsed on https://ohmjs.org/editor

Kyra {
	Program = Declaration*

	// Declarations
	Declaration = VarDeclaration | FunDeclaration | Statement | StructDeclaration
	VarDeclaration = varKeyword identifier TypeSpecifier ("=" Expression)? ";"
	FunDeclaration = "fun" identifier ParamList TypeSpecifier Block
	StructDeclaration = "struct" identifier "{" VarDeclaration* "}"

	// Expressions
	Expression = Assignment
	Assignment = Term "=" Expression -- Assignment
		| Term
	Term = Factor (( "-" | "+") Factor)*
	Factor = Call (("/" | "*") Call)*
	Call = Primary (ExpressionList | DotIdentifier)*
	Primary = number | identifier | Group

	// Statements
	Statement = Block | ExpressionStatement | ReturnStatement | PrintStatement
	ExpressionStatement = Expression ";"
	ReturnStatement = "return" Expression ";"
	PrintStatement = "print" Expression ";"

	// Utilities
	Group = "(" Expression ")"
	Block = "{" Declaration* "}"
	IdentifierList = "(" (identifier TypeSpecifier ("," identifier TypeSpecifier)*)? ")"
	IdentifierListWithVal = "(" (varKeyword identifier TypeSpecifier (varKeyword identifier TypeSpecifier)*)? ")"
	ExpressionList = "(" (Expression ("," Expression)*)? ")"
	TypeSpecifier = ":" identifier
	Param = varKeyword identifier TypeSpecifier
	ParamList = "(" (Param ("," Param)* )? ")"
	DotIdentifier = "."identifier

	// Lexical Grammar
	number = digit+
	identifier = ~keyword letter (letter | digit)*
	varKeyword = "val" | "var"
	keyword = varKeyword | "fun" | "return" | "print" | "struct"
}
